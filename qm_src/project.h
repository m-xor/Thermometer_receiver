/*$file${qm_src::project.h} ################################################*/
/*
* Model: balkonowy_rx_ult_.qm
* File:  ${qm_src::project.h}
*
* This code has been generated by QM 4.3.0 (https://www.state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${qm_src::project.h} #############################################*/
#ifndef project_h
#define project_h

/* define the event signals used in the application ------------------------*/
enum ProjectSignals {
    //Eventy wg typów o rosnącej wielkości
    //QEvt
    VW_SIG  = Q_USER_SIG,    //niskopoziomowy sterownik odebrał message (dobry lub zły to się okaże)
    TX_HALT_SIG,    //nadajnik zraportował nieudany start
    BTN_EVT_SIG,    //wykryto zmianę stanu przycisku
    BTN_PRSS_SIG,    //przycisk został wciśnięty (generowany przy długim wciśnięciu)
    BTN_REL_SIG,    //przycisk został zwolniony
    BTN_SHORT_SIG,    //krótkie przyciśnięcie (generowane przy zwalnaniu)


    //ErrEvt
    TX_ERR_SIG,    //błędy raportowane przez nadajnik
    ERR_SIG,            //błędy wewnętrzne firmware

    //ValEvt
    OTEMP_SIG,  /* odczyt temp czujnika zewn.*/
    BATT_SIG,    //odczyt napięcia baterii
    MIN_TEMP_SIG,    //minimalna temperatura w  zadanym przedziale czasu
    MAX_TEMP_SIG, //max temp. w zadanym przedziale

    MAX_PUB_SIG,          /* the last published signal */

    //MsgEvt
    MSG_SIG,    //treść odebranego komunikatu

    UPDATE_MINMAX_SIG,    //zlecenie przeszukania zapisanych danych i publikacji min i max
    RET_ORTHO_SIG,    //rządanie powrotu z komponentu ortogonalnego
    DISP_BLINK_SIG,    //migotanie wyświetlacza
    ORTHO_BLINK_SIG,  //ticker dla komponentu ortogonalnego wyświetlacza
    MINMAX_TIMEOUT_SIG,    //sygnał timeoutu dla komponentu orto pt. minimax
    DELAY_TIMEOUT_SIG,    //AO_Data drop outs detection
    TIMEOUT_SIG,

    MAX_SIG                     /* the last signal */
};

/* define symbols */
#include "protocol.h"

/*$declare${Events::ValEvt} ################################################*/
/*${Events::ValEvt} ........................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* private: */
    int16_t value;
    uint8_t denom;
} ValEvt;
/*$enddecl${Events::ValEvt} ################################################*/

/*$declare${Events::ErrEvt} ################################################*/
/*${Events::ErrEvt} ........................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* private: */
    uint8_t errCode;
} ErrEvt;
/*$enddecl${Events::ErrEvt} ################################################*/

/*$declare${Events::MsgEvt} ################################################*/
/*${Events::MsgEvt} ........................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* public: */
    uint32_t timestamp;
    uint8_t msgLen;
    uint8_t msg[XDATA_PACKET_SIZE];
} MsgEvt;
/*$enddecl${Events::MsgEvt} ################################################*/


/* declare other elements... */

#endif /* project_h */